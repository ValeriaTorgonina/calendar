!function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);const n={DAY:864e5},a=["January","February","March","April","May","June","July","August","September","October","November","December"];class i{constructor(t){this.calendar=t,this.prev=document.body.querySelector(".button-left"),this.next=document.body.querySelector(".button-right"),this.drawNextMonth(),this.drawPrevMonth(),this.drawNameOfMonth()}drawNameOfMonth(){let t=document.querySelector(".month"),e=a.find((t,e)=>e===this.calendar.currentMonth);t.innerHTML=`${e}`}drawNextMonth(){this.next.addEventListener("click",()=>{11!==this.calendar.currentMonth?(this.calendar.currentMonth++,this.calendar.currentDay=new Date(this.calendar.currentYear,this.calendar.currentMonth)):(this.calendar.currentYear++,this.calendar.currentMonth=0,this.calendar.currentDay=new Date(this.calendar.currentYear,this.calendar.currentMonth)),this.calendar.computeAttributes(),this.calendar.removeDates(),this.calendar.draw()})}drawPrevMonth(){this.prev.addEventListener("click",()=>{0!==this.calendar.currentMonth?(this.calendar.currentMonth--,this.calendar.currentDay=new Date(this.calendar.currentYear,this.calendar.currentMonth)):(this.calendar.currentYear--,this.calendar.currentMonth=11,this.calendar.currentDay=new Date(this.calendar.currentYear,this.calendar.currentMonth)),this.calendar.computeAttributes(),this.calendar.removeDates(),this.calendar.draw()})}}class h{constructor(){this.cell=this.createCell()}createCell(){const t=document.createElement("div");return t.classList.add("cell"),t}}new class{constructor(){this.calendar=document.querySelector(".calendar"),this.currentDay=new Date,this.currentMonth=this.currentDay.getMonth(),this.currentYear=this.currentDay.getFullYear(),this.cell=new h,this.month=new i(this),this.computeAttributes(),this.draw()}computeAttributes(){this.firstDayOfMonth=new Date(this.currentYear,this.currentMonth),this.firstDayOfNextMonth=new Date(this.currentYear,this.currentMonth+1),this.timeOfCurrentMonth=this.firstDayOfMonth.getTime(),this.timeOfNextMonth=this.firstDayOfNextMonth.getTime(),this.amountDayOnMonth=(this.timeOfNextMonth-this.timeOfCurrentMonth)/n.DAY,this.lastDayOfMonth=new Date(this.currentYear,this.currentMonth,this.amountDayOnMonth)}computeLastMonth(){return 0!==this.currentMonth?this.currentMonth-1:11}draw(){this.addCellBeforeFirstDay(),this.addDates(),this.addCellAfterLastDay(),this.month.drawNameOfMonth(),this.highlightCurrentDay(),console.log(this.currentDay)}addCellBeforeFirstDay(){let t=this.firstDayOfMonth,e=this.firstDayOfMonth.getDate(),r=this.computeLastMonth(),a=this.firstDayOfMonth.getDay();if(0!==a)for(let i=1;i<a;i++){let a=this.cell.createCell();a.style.color="darkGray",e=new Date(t.getTime()-n.DAY).getDate(),t=new Date(this.currentYear,r,e),a.innerHTML=`${e}`,this.calendar.prepend(a)}else for(let r=1;r<7;r++){let r=this.cell.createCell();r.style.color="darkGray",t=new Date(this.currentYear,this.currentMonth,e),e=new Date(t.getTime()-n.DAY).getDate(),r.innerHTML=`${e}`,this.calendar.prepend(r)}}addCellAfterLastDay(){let t=this.lastDayOfMonth,e=this.lastDayOfMonth.getDate(),r=7-this.lastDayOfMonth.getDay();if(7!==r)for(let a=0;a<r;a++){let r=this.cell.createCell();r.style.color="darkGray",t=new Date(this.currentYear,this.currentMonth,e),e=new Date(t.getTime()+n.DAY).getDate(),r.innerHTML=`${e}`,this.calendar.append(r)}}addDates(){let t=this.firstDayOfMonth.getDate(),e=this.firstDayOfMonth;for(let r=0;r<this.amountDayOnMonth;r++){let r=this.cell.createCell();r.innerHTML=`${t}`,this.calendar.append(r),e=new Date(this.currentYear,this.currentMonth,t),t=new Date(e.getTime()+n.DAY).getDate()}}removeDates(){for(;this.calendar.firstChild;)this.calendar.removeChild(this.calendar.firstChild)}highlightCurrentDay(){let t=new Date;if(t.getMonth()===this.currentMonth){[...this.calendar.querySelectorAll(".cell")].find(e=>e.innerHTML===`${t.getDate()}`).style.backgroundColor="#FFB97C"}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBwL3RpbWUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL21vbnRoLnRzIiwid2VicGFjazovLy8uL2FwcC9jZWxsLnRzIiwid2VicGFjazovLy8uL2FwcC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9hcHAvY2FsZW5kYXIudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJUSU1FIiwiREFZIiwiTU9OVEhfTkFNRVMiLCJjYWxlbmRhciIsInRoaXMiLCJwcmV2IiwiZG9jdW1lbnQiLCJib2R5IiwicXVlcnlTZWxlY3RvciIsIm5leHQiLCJkcmF3TmV4dE1vbnRoIiwiZHJhd1ByZXZNb250aCIsImRyYXdOYW1lT2ZNb250aCIsIm1vbnRoVGl0bGUiLCJuYW1lT2ZNb250aCIsImZpbmQiLCJpbmRleCIsImN1cnJlbnRNb250aCIsImlubmVySFRNTCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjdXJyZW50RGF5IiwiRGF0ZSIsImN1cnJlbnRZZWFyIiwiY29tcHV0ZUF0dHJpYnV0ZXMiLCJyZW1vdmVEYXRlcyIsImRyYXciLCJDZWxsIiwiY2VsbCIsImNyZWF0ZUNlbGwiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZmlyc3REYXlPZk1vbnRoIiwiZmlyc3REYXlPZk5leHRNb250aCIsInRpbWVPZkN1cnJlbnRNb250aCIsImdldFRpbWUiLCJ0aW1lT2ZOZXh0TW9udGgiLCJhbW91bnREYXlPbk1vbnRoIiwibGFzdERheU9mTW9udGgiLCJhZGRDZWxsQmVmb3JlRmlyc3REYXkiLCJhZGREYXRlcyIsImFkZENlbGxBZnRlckxhc3REYXkiLCJoaWdobGlnaHRDdXJyZW50RGF5IiwiY29uc29sZSIsImxvZyIsImRheSIsImRheU51bWJlciIsImdldERhdGUiLCJsYXN0TW9udGgiLCJjb21wdXRlTGFzdE1vbnRoIiwiYW1vdW50RGF5T2ZXZWVrQmVmb3JlRmlyc3REYXkiLCJnZXREYXkiLCJzdHlsZSIsImNvbG9yIiwicHJlcGVuZCIsImFtb3VudERheU9mV2Vla0FmdGVyTGFzdERheSIsImFwcGVuZCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJiYWNrZ3JvdW5kQ29sb3IiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVB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S0MsS0FBS2tELFVBQy9DeEIsRUFBS1QsYUFBZWdDLElBQ3BCOUMsS0FBS0QsU0FBU3lELE9BQU9qQyxJQUlqQyxXQUNJLElBQUl1QixFQUFZOUMsS0FBS2dDLGdCQUFnQmUsVUFDakNGLEVBQU03QyxLQUFLZ0MsZ0JBQ2YsSUFBSyxJQUFJcEUsRUFBSSxFQUFHQSxFQUFJb0MsS0FBS3FDLGlCQUFrQnpFLElBQUssQ0FDNUMsSUFBSTJELEVBQU92QixLQUFLdUIsS0FBS0MsYUFDckJELEVBQUtULGFBQWVnQyxJQUNwQjlDLEtBQUtELFNBQVN5RCxPQUFPakMsR0FDckJzQixFQUFNLElBQUk1QixLQUFLakIsS0FBS2tCLFlBQWFsQixLQUFLYSxhQUFjaUMsR0FDcERBLEVBQVksSUFBSTdCLEtBQUs0QixFQUFJVixVQUFZdkMsRUFBS0MsS0FBS2tELFdBR3ZELGNBQ0ksS0FBTy9DLEtBQUtELFNBQVMwRCxZQUNqQnpELEtBQUtELFNBQVMyRCxZQUFZMUQsS0FBS0QsU0FBUzBELFlBR2hELHNCQUNJLElBQUl6QyxFQUFhLElBQUlDLEtBQ3JCLEdBQUlELEVBQVdhLGFBQWU3QixLQUFLYSxhQUFjLENBRTlCLElBREhiLEtBQUtELFNBQVM0RCxpQkFBaUIsVUFFWmhELEtBQUtZLEdBQVFBLEVBQUtULGVBQWlCRSxFQUFXK0IsYUFDN0RLLE1BQU1RLGdCQUFrQiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGNvbnN0IFRJTUUgPSB7XHJcbiAgICBEQVk6IDg2NDAwMDAwXHJcbn07XHJcbmV4cG9ydCBjb25zdCBNT05USF9OQU1FUyA9IFtcclxuICAgICdKYW51YXJ5JyxcclxuICAgICdGZWJydWFyeScsXHJcbiAgICAnTWFyY2gnLFxyXG4gICAgJ0FwcmlsJyxcclxuICAgICdNYXknLFxyXG4gICAgJ0p1bmUnLFxyXG4gICAgJ0p1bHknLFxyXG4gICAgJ0F1Z3VzdCcsXHJcbiAgICAnU2VwdGVtYmVyJyxcclxuICAgICdPY3RvYmVyJyxcclxuICAgICdOb3ZlbWJlcicsXHJcbiAgICAnRGVjZW1iZXInXHJcbl07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHbHRaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDJGd2NDOTBhVzFsTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTFCUVUwc1EwRkJReXhOUVVGTkxFbEJRVWtzUjBGQlJ6dEpRVU5vUWl4SFFVRkhMRVZCUVVVc1VVRkJVVHREUVVOb1FpeERRVUZCTzBGQlJVUXNUVUZCVFN4RFFVRkRMRTFCUVUwc1YwRkJWeXhIUVVGSE8wbEJRM1pDTEZOQlFWTTdTVUZEVkN4VlFVRlZPMGxCUTFZc1QwRkJUenRKUVVOUUxFOUJRVTg3U1VGRFVDeExRVUZMTzBsQlEwd3NUVUZCVFR0SlFVTk9MRTFCUVUwN1NVRkRUaXhSUVVGUk8wbEJRMUlzVjBGQlZ6dEpRVU5ZTEZOQlFWTTdTVUZEVkN4VlFVRlZPMGxCUTFZc1ZVRkJWVHREUVVOaUxFTkJRVUVpZlE9PSIsImltcG9ydCB7IE1PTlRIX05BTUVTIH0gZnJvbSBcIi4vdGltZVwiO1xyXG5leHBvcnQgY2xhc3MgTW9udGgge1xyXG4gICAgY29uc3RydWN0b3IoY2FsZW5kYXIpIHtcclxuICAgICAgICB0aGlzLmNhbGVuZGFyID0gY2FsZW5kYXI7XHJcbiAgICAgICAgdGhpcy5wcmV2ID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCcuYnV0dG9uLWxlZnQnKTtcclxuICAgICAgICB0aGlzLm5leHQgPSBkb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24tcmlnaHQnKTtcclxuICAgICAgICB0aGlzLmRyYXdOZXh0TW9udGgoKTtcclxuICAgICAgICB0aGlzLmRyYXdQcmV2TW9udGgoKTtcclxuICAgICAgICB0aGlzLmRyYXdOYW1lT2ZNb250aCgpO1xyXG4gICAgfVxyXG4gICAgZHJhd05hbWVPZk1vbnRoKCkge1xyXG4gICAgICAgIGxldCBtb250aFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vbnRoJyk7XHJcbiAgICAgICAgbGV0IG5hbWVPZk1vbnRoID0gTU9OVEhfTkFNRVMuZmluZCgobmFtZSwgaW5kZXgpID0+IGluZGV4ID09PSB0aGlzLmNhbGVuZGFyLmN1cnJlbnRNb250aCk7XHJcbiAgICAgICAgbW9udGhUaXRsZS5pbm5lckhUTUwgPSBgJHtuYW1lT2ZNb250aH1gO1xyXG4gICAgfVxyXG4gICAgZHJhd05leHRNb250aCgpIHtcclxuICAgICAgICB0aGlzLm5leHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGVuZGFyLmN1cnJlbnRNb250aCAhPT0gMTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY3VycmVudE1vbnRoKys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnREYXkgPSBuZXcgRGF0ZSh0aGlzLmNhbGVuZGFyLmN1cnJlbnRZZWFyLCB0aGlzLmNhbGVuZGFyLmN1cnJlbnRNb250aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnRZZWFyKys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnRNb250aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnREYXkgPSBuZXcgRGF0ZSh0aGlzLmNhbGVuZGFyLmN1cnJlbnRZZWFyLCB0aGlzLmNhbGVuZGFyLmN1cnJlbnRNb250aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jb21wdXRlQXR0cmlidXRlcygpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnJlbW92ZURhdGVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuZHJhdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZHJhd1ByZXZNb250aCgpIHtcclxuICAgICAgICB0aGlzLnByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGVuZGFyLmN1cnJlbnRNb250aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jdXJyZW50TW9udGgtLTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY3VycmVudERheSA9IG5ldyBEYXRlKHRoaXMuY2FsZW5kYXIuY3VycmVudFllYXIsIHRoaXMuY2FsZW5kYXIuY3VycmVudE1vbnRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY3VycmVudFllYXItLTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuY3VycmVudE1vbnRoID0gMTE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmN1cnJlbnREYXkgPSBuZXcgRGF0ZSh0aGlzLmNhbGVuZGFyLmN1cnJlbnRZZWFyLCB0aGlzLmNhbGVuZGFyLmN1cnJlbnRNb250aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5jb21wdXRlQXR0cmlidXRlcygpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnJlbW92ZURhdGVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuZHJhdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJXOXVkR2d1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5aGNIQXZiVzl1ZEdndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRMEVzVDBGQlR5eEZRVUZETEZkQlFWY3NSVUZCUXl4TlFVRk5MRkZCUVZFc1EwRkJRenRCUVVWdVF5eE5RVUZOTEU5QlFVOHNTMEZCU3p0SlFVdGtMRmxCUVc5Q0xGRkJRV3RDTzFGQlFXeENMR0ZCUVZFc1IwRkJVaXhSUVVGUkxFTkJRVlU3VVVGSWRFTXNVMEZCU1N4SFFVRnpRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRVHRSUVVOeVJTeFRRVUZKTEVkQlFYTkNMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkJPMUZCU1d4RkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUVR0UlFVTndRaXhKUVVGSkxFTkJRVU1zWVVGQllTeEZRVUZGTEVOQlFVRTdVVUZEY0VJc1NVRkJTU3hEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZCTzBsQlF6RkNMRU5CUVVNN1NVRkhSQ3hsUVVGbE8xRkJRMWdzU1VGQlNTeFZRVUZWTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlFUdFJRVU5xUkN4SlFVRkpMRmRCUVZjc1IwRkJSeXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUzBGQlN5eExRVUZMTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3VVVGRGVrWXNWVUZCVlN4RFFVRkRMRk5CUVZNc1IwRkJSeXhIUVVGSExGZEJRVmNzUlVGQlJTeERRVUZCTzBsQlF6TkRMRU5CUVVNN1NVRkhSQ3hoUVVGaE8xRkJRMVFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZPMWxCUTNKRExFbEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WlFVRlpMRXRCUVVzc1JVRkJSU3hGUVVGRk8yZENRVU5zUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZCTzJkQ1FVTTFRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzJGQlF6ZEdPMmxDUVVOSk8yZENRVU5FTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVUU3WjBKQlF6TkNMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeEhRVUZITEVOQlFVTXNRMEZCUVR0blFrRkRPVUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0aFFVTTNSanRaUVVORUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlFUdFpRVU5xUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZCTzFsQlF6TkNMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVRTdVVUZEZUVJc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFRpeERRVUZETzBsQlIwUXNZVUZCWVR0UlFVTlVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJUdFpRVU55UXl4SlFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeExRVUZMTEVOQlFVTXNSVUZCUlR0blFrRkRha01zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRVHRuUWtGRE5VSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRoUVVNM1JqdHBRa0ZEU1R0blFrRkRSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkJPMmRDUVVNelFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1IwRkJSeXhGUVVGRkxFTkJRVUU3WjBKQlF5OUNMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3WVVGRE4wWTdXVUZEUkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHbENRVUZwUWl4RlFVRkZMRU5CUVVFN1dVRkRha01zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRVHRaUVVNelFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGQk8xRkJRM2hDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUTA0c1EwRkJRenREUVVOS0luMD0iLCJleHBvcnQgY2xhc3MgQ2VsbCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNlbGwgPSB0aGlzLmNyZWF0ZUNlbGwoKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUNlbGwoKSB7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcclxuICAgICAgICByZXR1cm4gZGl2O1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyVnNiQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDJGd2NDOWpaV3hzTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMRTFCUVUwc1QwRkJUeXhKUVVGSk8wbEJSMkk3VVVGR1FTeFRRVUZKTEVkQlFXMUNMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlFUdEpRVWw0UXl4RFFVRkRPMGxCUlVRc1ZVRkJWVHRSUVVOT0xFMUJRVTBzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRE1VTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZETVVJc1QwRkJUeXhIUVVGSExFTkJRVUU3U1VGRFpDeERRVUZETzBOQlIwb2lmUT09IiwiaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tIFwiLi9jYWxlbmRhclwiO1xyXG5jb25zdCBjYWxlbmRhciA9IG5ldyBDYWxlbmRhcigpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOWhjSEF2YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1QwRkJUeXhGUVVGRExGRkJRVkVzUlVGQlF5eE5RVUZOTEZsQlFWa3NRMEZCUXp0QlFVVndReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEZGQlFWRXNSVUZCUlN4RFFVRkRJbjA9IiwiaW1wb3J0IHsgVElNRSB9IGZyb20gJy4vdGltZSc7XHJcbmltcG9ydCB7IE1vbnRoIH0gZnJvbSBcIi4vbW9udGhcIjtcclxuaW1wb3J0IHsgQ2VsbCB9IGZyb20gXCIuL2NlbGxcIjtcclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2FsZW5kYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FsZW5kYXInKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnREYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudE1vbnRoID0gdGhpcy5jdXJyZW50RGF5LmdldE1vbnRoKCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WWVhciA9IHRoaXMuY3VycmVudERheS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgIHRoaXMuY2VsbCA9IG5ldyBDZWxsKCk7XHJcbiAgICAgICAgdGhpcy5tb250aCA9IG5ldyBNb250aCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbXB1dGVBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICB9XHJcbiAgICBjb21wdXRlQXR0cmlidXRlcygpIHtcclxuICAgICAgICB0aGlzLmZpcnN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKHRoaXMuY3VycmVudFllYXIsIHRoaXMuY3VycmVudE1vbnRoKTtcclxuICAgICAgICB0aGlzLmZpcnN0RGF5T2ZOZXh0TW9udGggPSBuZXcgRGF0ZSh0aGlzLmN1cnJlbnRZZWFyLCB0aGlzLmN1cnJlbnRNb250aCArIDEpO1xyXG4gICAgICAgIHRoaXMudGltZU9mQ3VycmVudE1vbnRoID0gdGhpcy5maXJzdERheU9mTW9udGguZ2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMudGltZU9mTmV4dE1vbnRoID0gdGhpcy5maXJzdERheU9mTmV4dE1vbnRoLmdldFRpbWUoKTtcclxuICAgICAgICB0aGlzLmFtb3VudERheU9uTW9udGggPSAodGhpcy50aW1lT2ZOZXh0TW9udGggLSB0aGlzLnRpbWVPZkN1cnJlbnRNb250aCkgLyBUSU1FLkRBWTtcclxuICAgICAgICB0aGlzLmxhc3REYXlPZk1vbnRoID0gbmV3IERhdGUodGhpcy5jdXJyZW50WWVhciwgdGhpcy5jdXJyZW50TW9udGgsIHRoaXMuYW1vdW50RGF5T25Nb250aCk7XHJcbiAgICB9XHJcbiAgICBjb21wdXRlTGFzdE1vbnRoKCkge1xyXG4gICAgICAgIGxldCBsYXN0TW9udGg7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE1vbnRoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsYXN0TW9udGggPSB0aGlzLmN1cnJlbnRNb250aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbGFzdE1vbnRoID0gMTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICB0aGlzLmFkZENlbGxCZWZvcmVGaXJzdERheSgpO1xyXG4gICAgICAgIHRoaXMuYWRkRGF0ZXMoKTtcclxuICAgICAgICB0aGlzLmFkZENlbGxBZnRlckxhc3REYXkoKTtcclxuICAgICAgICB0aGlzLm1vbnRoLmRyYXdOYW1lT2ZNb250aCgpO1xyXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0Q3VycmVudERheSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY3VycmVudERheSk7XHJcbiAgICB9XHJcbiAgICBhZGRDZWxsQmVmb3JlRmlyc3REYXkoKSB7XHJcbiAgICAgICAgbGV0IGRheSA9IHRoaXMuZmlyc3REYXlPZk1vbnRoO1xyXG4gICAgICAgIGxldCBkYXlOdW1iZXIgPSB0aGlzLmZpcnN0RGF5T2ZNb250aC5nZXREYXRlKCk7XHJcbiAgICAgICAgbGV0IGxhc3RNb250aCA9IHRoaXMuY29tcHV0ZUxhc3RNb250aCgpO1xyXG4gICAgICAgIGxldCBhbW91bnREYXlPZldlZWtCZWZvcmVGaXJzdERheSA9IHRoaXMuZmlyc3REYXlPZk1vbnRoLmdldERheSgpO1xyXG4gICAgICAgIGlmIChhbW91bnREYXlPZldlZWtCZWZvcmVGaXJzdERheSAhPT0gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFtb3VudERheU9mV2Vla0JlZm9yZUZpcnN0RGF5OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gdGhpcy5jZWxsLmNyZWF0ZUNlbGwoKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuY29sb3IgPSBcImRhcmtHcmF5XCI7XHJcbiAgICAgICAgICAgICAgICBkYXlOdW1iZXIgPSBuZXcgRGF0ZShkYXkuZ2V0VGltZSgpIC0gVElNRS5EQVkpLmdldERhdGUoKTtcclxuICAgICAgICAgICAgICAgIGRheSA9IG5ldyBEYXRlKHRoaXMuY3VycmVudFllYXIsIGxhc3RNb250aCwgZGF5TnVtYmVyKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gYCR7ZGF5TnVtYmVyfWA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnByZXBlbmQoY2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgNzsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHRoaXMuY2VsbC5jcmVhdGVDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmNvbG9yID0gXCJkYXJrR3JheVwiO1xyXG4gICAgICAgICAgICAgICAgZGF5ID0gbmV3IERhdGUodGhpcy5jdXJyZW50WWVhciwgdGhpcy5jdXJyZW50TW9udGgsIGRheU51bWJlcik7XHJcbiAgICAgICAgICAgICAgICBkYXlOdW1iZXIgPSBuZXcgRGF0ZShkYXkuZ2V0VGltZSgpIC0gVElNRS5EQVkpLmdldERhdGUoKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gYCR7ZGF5TnVtYmVyfWA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLnByZXBlbmQoY2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRDZWxsQWZ0ZXJMYXN0RGF5KCkge1xyXG4gICAgICAgIGxldCBkYXkgPSB0aGlzLmxhc3REYXlPZk1vbnRoO1xyXG4gICAgICAgIGxldCBkYXlOdW1iZXIgPSB0aGlzLmxhc3REYXlPZk1vbnRoLmdldERhdGUoKTtcclxuICAgICAgICBsZXQgYW1vdW50RGF5T2ZXZWVrQWZ0ZXJMYXN0RGF5ID0gNyAtIHRoaXMubGFzdERheU9mTW9udGguZ2V0RGF5KCk7XHJcbiAgICAgICAgaWYgKGFtb3VudERheU9mV2Vla0FmdGVyTGFzdERheSAhPT0gNykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudERheU9mV2Vla0FmdGVyTGFzdERheTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHRoaXMuY2VsbC5jcmVhdGVDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmNvbG9yID0gXCJkYXJrR3JheVwiO1xyXG4gICAgICAgICAgICAgICAgZGF5ID0gbmV3IERhdGUodGhpcy5jdXJyZW50WWVhciwgdGhpcy5jdXJyZW50TW9udGgsIGRheU51bWJlcik7XHJcbiAgICAgICAgICAgICAgICBkYXlOdW1iZXIgPSBuZXcgRGF0ZShkYXkuZ2V0VGltZSgpICsgVElNRS5EQVkpLmdldERhdGUoKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gYCR7ZGF5TnVtYmVyfWA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmFwcGVuZChjZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFkZERhdGVzKCkge1xyXG4gICAgICAgIGxldCBkYXlOdW1iZXIgPSB0aGlzLmZpcnN0RGF5T2ZNb250aC5nZXREYXRlKCk7XHJcbiAgICAgICAgbGV0IGRheSA9IHRoaXMuZmlyc3REYXlPZk1vbnRoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hbW91bnREYXlPbk1vbnRoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGNlbGwgPSB0aGlzLmNlbGwuY3JlYXRlQ2VsbCgpO1xyXG4gICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9IGAke2RheU51bWJlcn1gO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyLmFwcGVuZChjZWxsKTtcclxuICAgICAgICAgICAgZGF5ID0gbmV3IERhdGUodGhpcy5jdXJyZW50WWVhciwgdGhpcy5jdXJyZW50TW9udGgsIGRheU51bWJlcik7XHJcbiAgICAgICAgICAgIGRheU51bWJlciA9IG5ldyBEYXRlKGRheS5nZXRUaW1lKCkgKyBUSU1FLkRBWSkuZ2V0RGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlbW92ZURhdGVzKCkge1xyXG4gICAgICAgIHdoaWxlICh0aGlzLmNhbGVuZGFyLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5yZW1vdmVDaGlsZCh0aGlzLmNhbGVuZGFyLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhpZ2hsaWdodEN1cnJlbnREYXkoKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnREYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGlmIChjdXJyZW50RGF5LmdldE1vbnRoKCkgPT09IHRoaXMuY3VycmVudE1vbnRoKSB7XHJcbiAgICAgICAgICAgIGxldCBjZWxscyA9IHRoaXMuY2FsZW5kYXIucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcclxuICAgICAgICAgICAgbGV0IGNlbGxzQXJyID0gWy4uLmNlbGxzXTtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnREYXRlQ2VsbCA9IGNlbGxzQXJyLmZpbmQoY2VsbCA9PiBjZWxsLmlubmVySFRNTCA9PT0gYCR7Y3VycmVudERheS5nZXREYXRlKCl9YCk7XHJcbiAgICAgICAgICAgIGN1cnJlbnREYXRlQ2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI0ZGQjk3Qyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyRnNaVzVrWVhJdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOWhjSEF2WTJGc1pXNWtZWEl1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUMEZCVHl4RlFVRkRMRWxCUVVrc1JVRkJReXhOUVVGTkxGRkJRVkVzUTBGQlFUdEJRVU16UWl4UFFVRlBMRVZCUVVNc1MwRkJTeXhGUVVGRExFMUJRVTBzVTBGQlV5eERRVUZCTzBGQlF6ZENMRTlCUVU4c1JVRkJReXhKUVVGSkxFVkJRVU1zVFVGQlRTeFJRVUZSTEVOQlFVTTdRVUZGTlVJc1RVRkJUU3hQUVVGUExGRkJRVkU3U1VGamFrSTdVVUZZUVN4aFFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0UlFVTTVReXhsUVVGVkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVWQlFVVXNRMEZCUVR0UlFVTjJRaXhwUWtGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVUU3VVVGRGVrTXNaMEpCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkJPMUZCVTNaRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4SlFVRkpMRVZCUVVVc1EwRkJRVHRSUVVOMFFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzFGQlF6VkNMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4RFFVRkJPMUZCUTNoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUVR0SlFVTm1MRU5CUVVNN1NVRkZSQ3hwUWtGQmFVSTdVVUZEWWl4SlFVRkpMRU5CUVVNc1pVRkJaU3hIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzFGQlEzQkZMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRE5VVXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEhRVUZITEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVUU3VVVGRGVFUXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVUU3VVVGRGVrUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJTU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZCTzFGQlEzQkdMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZCTzBsQlF6bEdMRU5CUVVNN1NVRkZSQ3huUWtGQlowSTdVVUZEV2l4SlFVRkpMRk5CUVdkQ0xFTkJRVUU3VVVGRGNFSXNTVUZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hMUVVGTExFTkJRVU1zUlVGQlJUdFpRVU40UWl4UFFVRlBMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVOQlFVTXNRMEZCUVR0VFFVTXpRenRoUVVOSk8xbEJRMFlzVDBGQlR5eFRRVUZUTEVkQlFVY3NSVUZCUlN4RFFVRkJPMU5CUTNaQ08wbEJRMHdzUTBGQlF6dEpRVVZFTEVsQlFVazdVVUZEUVN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNRMEZCUVR0UlFVTTFRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVRTdVVUZEWml4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUVR0UlFVTXhRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkJPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGQk8xRkJRekZDTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZCTzBsQlEyaERMRU5CUVVNN1NVRkZSQ3h4UWtGQmNVSTdVVUZEYWtJc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUVR0UlFVTTVRaXhKUVVGSkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGQk8xRkJRemxETEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4RFFVRkJPMUZCUTNaRExFbEJRVWtzTmtKQlFUWkNMRWRCUVVjc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUVR0UlFVTnFSU3hKUVVGSExEWkNRVUUyUWl4TFFVRkxMRU5CUVVNc1JVRkJSVHRaUVVOd1F5eExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzTmtKQlFUWkNMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3WjBKQlEzQkVMRWxCUVVrc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVFN1owSkJRMnBETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhIUVVGSExGVkJRVlVzUTBGQlFUdG5Ra0ZETjBJc1UwRkJVeXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVFN1owSkJRM2hFTEVkQlFVY3NSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEZOQlFWTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRVHRuUWtGRGRFUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhIUVVGSExGTkJRVk1zUlVGQlJTeERRVUZCTzJkQ1FVTXZRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRoUVVNNVFqdFRRVU5LTzJGQlEwazdXVUZEUkN4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8yZENRVU40UWl4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkJPMmRDUVVOcVF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhWUVVGVkxFTkJRVUU3WjBKQlF6ZENMRWRCUVVjc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVRTdaMEpCUXpsRUxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGQk8yZENRVU40UkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFZEJRVWNzVTBGQlV5eEZRVUZGTEVOQlFVRTdaMEpCUXk5Q0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8yRkJRemxDTzFOQlEwbzdTVUZEVEN4RFFVRkRPMGxCUlVRc2JVSkJRVzFDTzFGQlEyWXNTVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlFUdFJRVU0zUWl4SlFVRkpMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkJPMUZCUXpkRExFbEJRVWtzTWtKQlFUSkNMRWRCUVVjc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVFN1VVRkZiRVVzU1VGQlJ5d3lRa0ZCTWtJc1MwRkJTeXhEUVVGRExFVkJRVVU3V1VGRGJFTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITERKQ1FVRXlRaXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzJkQ1FVTnNSQ3hKUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGQk8yZENRVU5xUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUjBGQlJ5eFZRVUZWTEVOQlFVRTdaMEpCUXpkQ0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVFN1owSkJRemxFTEZOQlFWTXNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZCTzJkQ1FVTjRSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVkQlFVY3NVMEZCVXl4RlFVRkZMRU5CUVVFN1owSkJReTlDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzJGQlF6ZENPMU5CUTBvN1NVRkRUQ3hEUVVGRE8wbEJSVVFzVVVGQlVUdFJRVU5LTEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVRTdVVUZET1VNc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUVR0UlFVTTVRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRelZETEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVRTdXVUZEYWtNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEhRVUZITEZOQlFWTXNSVUZCUlN4RFFVRkJPMWxCUXk5Q0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8xbEJSVEZDTEVkQlFVY3NSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVUU3V1VGRE9VUXNVMEZCVXl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVRTdVMEZETTBRN1NVRkZUQ3hEUVVGRE8wbEJSVVFzVjBGQlZ6dFJRVU5RTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFVkJRVVU3V1VGRE4wSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRUUVVOMlJEdEpRVU5NTEVOQlFVTTdTVUZGUkN4dFFrRkJiVUk3VVVGRFppeEpRVUZKTEZWQlFWVXNSMEZCUnl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGQk8xRkJRek5DTEVsQlFVY3NWVUZCVlN4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVTdXVUZETlVNc1NVRkJTU3hMUVVGTExFZEJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0WlFVTnNSQ3hKUVVGSkxGRkJRVkVzUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRnJRaXhEUVVGQk8xbEJRekZETEVsQlFVa3NaVUZCWlN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRVHRaUVVONlJpeGxRVUZsTEVOQlFVTXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1IwRkJSeXhUUVVGVExFTkJRVUU3VTBGRGNFUTdTVUZGVEN4RFFVRkRPME5CUlVvaWZRPT0iXSwic291cmNlUm9vdCI6IiJ9